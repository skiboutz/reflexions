What happens when you initialize a repository? Why do you need to do it?
The .git folder is created storing all the information needed to maintaint the repository.
You need to initialize your repository to let Git know where to look for information abouttherepository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area contains only the file you want to be part of your next commit. It allows to think what you want to add before you actually do it and also allows to add only the file you want and leave some files unversioned

How can you use the staging area to make sure you have one commit per logical change?
With the help of git diff --staged you can actually see which files are going to be part of the commit so you can check if some files are missing or some files shouldn't be added before you commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When working in a team and multiple changes are needed, branch can help limit the collisions. Also making all the commit in a branch and then merging on the master only shows the features incorporated not the one left out or in progress.

How do the diagrams help you visualize the branch structure?
The diagram help visualize when the branch was created as well as the evolution of other branches compared to it. It can help a developper realise that he's too far from the main branch and do a merge to stop the divergeance.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The merged branches contain all changes made in both branches. We represent it like that because the new branch tip actually represents both branches and their respective commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git helps by merging obvious non conflicting changes while it leaves you to concentrate on problematic sections only.